package appobj

import (
	"crypto/ecdsa"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"{{.AppPath}}/controllers"
	"{{.AppPath}}/middleware"
	"{{.AppPath}}/models"
	"github.com/dgrijalva/jwt-go"
	"github.com/gorilla/mux"
)

// AppObj is the one and only application object
type AppObj struct {
	cfg       	Config
	dbConfig  	DBConfig
	services  	*models.Services
    {{range .Entities -}} 
    {{.Header.Value}}C *controllers.{{.Header.Name}}Controller
    {{end -}}
	usrC     	*controllers.UsrController
	usrgroupC  	*controllers.UsrGroupController
	authC      	*controllers.AuthController
	groupauthC 	*controllers.GroupAuthController
	router    	*mux.Router
	verifyKey 	*ecdsa.PublicKey  // jwt support
	signKey   	*ecdsa.PrivateKey // jwt support
}

// RunMode defines the two basic operation modes
type RunMode int

const (
	cDev RunMode = iota // development settings (.dev.config.json)
	cPrd                // production settings (.prd.config.json)
	cDef                // default settings - uses compiled config in app.DefaultConfig()
)

// Initialize the application
func (a *AppObj) Initialize(dev, prd, dr bool) {

	// retrieve the app config based on production/test setting
	if prd && dev {
		fmt.Println("please specify only -dev or -prod, but not both.  Exiting.")
		os.Exit(-1)
	}

	// fallback to compiled config if neither -dev or -prod were specified
	if !prd && !dev {
		a.cfg = LoadConfig(cDef)
	}

	// try to load production configuration file (.prd.config.json)
	if prd {
		a.cfg = LoadConfig(cPrd)
	}

	// try to load development configuration file (.dev.config.json)
	if dev {
		a.cfg = LoadConfig(cDev)
	}

	// get the DB config
	a.dbConfig = a.cfg.Database

	// create Services
	a.createServices()

	// perform destructive reset of db table content?
	if dr {
		a.destructiveReset()
	}

	// perform automigration of positive db table changes
	a.automigrate()

	// initialize JWT keys for user-authentiction
	a.initializeJWTKeys()

	// create Controllers
	a.createControllers()

	// initialize Routes
	a.initializeRoutes()

	// validate Auths against reqistered end-points
 	a.initializeAuths()
}

// destructiveReset executes a destructive reset to refresh db
func (a *AppObj) destructiveReset() {
	a.services.DestructiveReset()
	fmt.Println("Destructive reset has been carried out.  Exiting...")
	os.Exit(0)
}

// automigrate the db tables to ensure positive changes in
// the model structure have been applied.
func (a *AppObj) automigrate() {
	if err := a.services.AlterAllTables(); err != nil {
		panic(err)
	}
}

// createServices creates new services for the application object
func (a *AppObj) createServices() {
	var err error
	a.services, err = models.NewServices(
		models.WithSqac(a.dbConfig.Dialect(), a.dbConfig.ConnectionInfo()),
		models.WithLogMode(!a.cfg.IsProd()),
		models.WithUsr(a.cfg.Pepper),
		models.WithUsrGroup(),
		models.WithAuth(),
		models.WithGroupAuth(),
        {{range .Entities -}} 
        models.With{{.Header.Name}}(),
        {{end -}}
		// models.With<Entity>,
	)

	if err != nil {
		panic(err)
	}
}

// initialize the jwt keys
func (a *AppObj) initializeJWTKeys() {

	fmt.Println("JWTPrivKeyFile:", a.cfg.JWTPrivKeyFile)
	fmt.Println("JWTPubKeyFile:", a.cfg.JWTPubKeyFile)

	signBytes, err := ioutil.ReadFile(a.cfg.JWTPrivKeyFile)
	fatal(err)

	a.signKey, err = jwt.ParseECPrivateKeyFromPEM(signBytes)
	fatal(err)

	verifyBytes, err := ioutil.ReadFile(a.cfg.JWTPubKeyFile)
	fatal(err)

	a.verifyKey, err = jwt.ParseECPublicKeyFromPEM(verifyBytes)
	fatal(err)
}

// createControllers for each entity
func (a *AppObj) createControllers() {
    a.usrC = controllers.NewUsrController(a.services.Usr, a.signKey, a.verifyKey)
	a.usrgroupC = controllers.NewUsrGroupController(a.services.UsrGroup)
	a.authC = controllers.NewAuthController(a.services.Auth)
	a.groupauthC = controllers.NewGroupAuthController(a.services.GroupAuth)
    {{range .Entities -}} 
    a.{{.Header.Value}}C = controllers.New{{.Header.Name}}Controller(a.services.{{.Header.Name}})
    {{end -}}
}

// initializeRoutes creates routes and applies middleware
func (a *AppObj) initializeRoutes() {

	// retrieve the group auth assignments for storage in the middleware cache
	groupAuths := a.services.GroupAuth.GetGroupAuths()
	mapGroupAuths := make(map[string]map[string]bool) // [groupName][authName]true
	for _, v := range groupAuths {

		// if the groupName does not exist in the top-level map, create
		// a new authMap for that group, then add the group and the auth
		// to mapGroupAuths
		mapAuth := mapGroupAuths[v.GroupName]
		if mapAuth == nil {
			mapAuth = make(map[string]bool)
			mapAuth[v.AuthName] = true
			mapGroupAuths[v.GroupName] = mapAuth
			continue
		}

		// if the groupName does exist in the top-level map, add the auth to
		// the group's auth map
		mapAuth[v.AuthName] = true
	}

	// create the RequireUsr middleware to ensure page access is secure.
	requireUserMw := middleware.InitMW(a.services.Usr, a.verifyKey, mapGroupAuths)

	// get a gorilla router and create controllers
	a.router = mux.NewRouter()
	if a.router == nil {
		panic("appobj: failed to initialize mux")
	}

	// add usr routes
	a.router.HandleFunc("/usr", a.usrC.Create).Methods("POST").Name("usr.CREATE")
	a.router.HandleFunc("/usr/login", a.usrC.Login).Methods("POST").Name("usr.LOGIN")
	a.router.HandleFunc("/usr/{id:[0-9]+}", a.usrC.Delete).Methods("DELETE").Name("usr.DELETE")
	a.router.HandleFunc("/usr/{id:[0-9]+}", a.usrC.Update).Methods("PUT").Name("usr.UPDATE")

	// usrgroup CRUD routes
	a.router.HandleFunc("/usrgroups", requireUserMw.ApplyFn(a.usrgroupC.GetUsrGroups)).Methods("GET").Name("usrgroup.GET_SET")
	a.router.HandleFunc("/usrgroup", requireUserMw.ApplyFn(a.usrgroupC.Create)).Methods("POST").Name("usrgroup.CREATE")
	a.router.HandleFunc("/usrgroup/{id:[0-9]+}", requireUserMw.ApplyFn(a.usrgroupC.Get)).Methods("GET").Name("usrgroup.GET_ID")
	a.router.HandleFunc("/usrgroup/{id:[0-9]+}", requireUserMw.ApplyFn(a.usrgroupC.Update)).Methods("PUT").Name("usrgroup.CREATE")
	a.router.HandleFunc("/usrgroup/{id:[0-9]+}", requireUserMw.ApplyFn(a.usrgroupC.Delete)).Methods("DELETE").Name("usrgroup.DELETE")

	// usrgroup static filter routes
	// http://127.0.0.1:<port>/usrgroups/group_name(EQ '<sel_string>')
	a.router.HandleFunc("/usrgroups/group_name{group_name:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.usrgroupC.GetUsrGroupsByGroupName)).Methods("GET").Name("usrgroup.STATICFLTR_ByGroupName")

	// http://127.0.0.1:<port>/usrgroups/description(EQ '<sel_string>')
	a.router.HandleFunc("/usrgroups/description{description:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.usrgroupC.GetUsrGroupsByDescription)).Methods("GET").Name("usrgroup.STATICFLTR_ByDescription")

	// auth CRUD routes
	// a.router.HandleFunc("/auths", requireUserMw.ApplyFn(a.authC.GetAuths)).Methods("GET").Queries("desc", "{desc}")
	a.router.HandleFunc("/auths", requireUserMw.ApplyFn(a.authC.GetAuths)).Methods("GET").Name("auth.GET_SET")
	a.router.HandleFunc("/auth", requireUserMw.ApplyFn(a.authC.Create)).Methods("POST").Name("auth.CREATE")
	a.router.HandleFunc("/auth/{id:[0-9]+}", requireUserMw.ApplyFn(a.authC.Get)).Methods("GET").Name("auth.GET_ID")
	a.router.HandleFunc("/auth/{id:[0-9]+}", requireUserMw.ApplyFn(a.authC.Update)).Methods("PUT").Name("auth.UPDATE")
	a.router.HandleFunc("/auth/{id:[0-9]+}", requireUserMw.ApplyFn(a.authC.Delete)).Methods("DELETE").Name("auth.DELETE")

	// auth static filter routes
	// http://127.0.0.1:<port>/auths/auth_name(EQ '<sel_string>')
	a.router.HandleFunc("/auths/auth_name{auth_name:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.authC.GetAuthsByAuthName)).Methods("GET").Name("auth.STATICFLTR_ByAuthName")

	// http://127.0.0.1:<port>/auths/description(EQ '<sel_string>')
	a.router.HandleFunc("/auths/description{description:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.authC.GetAuthsByDescription)).Methods("GET").Name("auth.STATICFLTR_ByDescription")

	// groupauth CRUD routes
	a.router.HandleFunc("/groupauths", requireUserMw.ApplyFn(a.groupauthC.GetGroupAuths)).Methods("GET").Name("groupauth.GET_SET")
	a.router.HandleFunc("/groupauth", requireUserMw.ApplyFn(a.groupauthC.Create)).Methods("POST").Name("groupauth.CREATE")
	a.router.HandleFunc("/groupauth/{id:[0-9]+}", requireUserMw.ApplyFn(a.groupauthC.Get)).Methods("GET").Name("groupauth.GET_ID")
	a.router.HandleFunc("/groupauth/{id:[0-9]+}", requireUserMw.ApplyFn(a.groupauthC.Update)).Methods("PUT").Name("groupauth.UPDATE")
	a.router.HandleFunc("/groupauth/{id:[0-9]+}", requireUserMw.ApplyFn(a.groupauthC.Delete)).Methods("DELETE").Name("groupauth.DELETE")

	// http://127.0.0.1:<port>/groupauths/auth_name(EQ '<sel_string>')
	a.router.HandleFunc("/groupauths/auth_name{auth_name:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.groupauthC.GetGroupAuthsByAuthName)).Methods("GET").Name("groupauth.STATICFLTR_ByAuthName")

	// http://127.0.0.1:<port>/groupauths/description(EQ '<sel_string>')
	a.router.HandleFunc("/groupauths/description{description:[(]+(?:EQ|eq|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+}",
		requireUserMw.ApplyFn(a.groupauthC.GetGroupAuthsByDescription)).Methods("GET").Name("groupauth.STATICFLTR_ByDescription")

	// http://127.0.0.1:<port>/groupauths/group_id(EQ '<sel_string>')
	a.router.HandleFunc("/groupauths/group_id{group_id:[(]+(?:EQ|eq|LT|lt|GT|gt)+[ ']+[0-9]+[')]+}",
		requireUserMw.ApplyFn(a.groupauthC.GetGroupAuthsByGroupID)).Methods("GET").Name("groupauth.STATICFLTR_ByGroupID")

    {{range .Entities -}} 
    // ====================== {{.Header.Name}} protected routes for standard CRUD access ======================
    a.router.HandleFunc("/{{.Header.Value}}s", requireUserMw.ApplyFn(a.{{.Header.Value}}C.Get{{.Header.Name}}s)).Methods("GET").Name("{{.Header.Value}}.GET_SET")
    a.router.HandleFunc("/{{.Header.Value}}", requireUserMw.ApplyFn(a.{{.Header.Value}}C.Create)).Methods("POST").Name("{{.Header.Value}}.CREATE")
    a.router.HandleFunc("/{{.Header.Value}}/{id:[0-9]+}", requireUserMw.ApplyFn(a.{{.Header.Value}}C.Get)).Methods("GET").Name("{{.Header.Value}}.GET_ID")
    a.router.HandleFunc("/{{.Header.Value}}/{id:[0-9]+}", requireUserMw.ApplyFn(a.{{.Header.Value}}C.Update)).Methods("PUT").Name("{{.Header.Value}}.UPDATE")
    a.router.HandleFunc("/{{.Header.Value}}/{id:[0-9]+}", requireUserMw.ApplyFn(a.{{.Header.Value}}C.Delete)).Methods("DELETE").Name("{{.Header.Value}}.DELETE")
	
    {{$headerName := .Header.Name -}}
	{{$headerValue := .Header.Value -}}

	{{if .Relations -}}
	//====================================== {{.Header.Name}} Relations ======================================
	{{end -}}
	{{range .Relations -}}
		{{if or .GetHasOne -}}
	// hasOne relation {{.RelName}} for {{$headerName}}
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}")
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}/{{ printf "%s" "{" }}{{.ToEntityLC}}_id:[0-9]+}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}_id")	

		{{end -}}

		{{if .GetHasMany -}}
	// hasMany relation {{.RelName}} for {{$headerName}}
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}")
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}/{{ printf "%s" "{" }}{{.ToEntityLC}}_id:[0-9]+}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}_id")

		{{end -}}

		{{if .GetBelongsTo -}}
	// belongsTo relation {{.RelName}} for {{$headerName}}
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}")
	a.router.HandleFunc("/{{$headerValue}}/{{ printf "%s" "{" }}{{$headerValue}}_id:[0-9]+}/{{.RelNameLC}}/{{ printf "%s" "{" }}{{.ToEntityLC}}_id:[0-9]+}", requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}{{.RelName}})).Methods("GET").Name("{{$headerValue}}.REL_{{.RelNameLC}}_id")	

		{{end -}}

	{{end -}}

//=================================== {{.Header.Name}} Static Filters ===================================
	{{range .Fields -}}
		{{if .Selectable -}}
			{{if .IsStringFieldType -}}
				{{/*       [(]+(?:EQ|eq|NE|ne|LIKE|like)+[ ']+[a-zA-Z0-9_]+[')]+      */ -}}
				// http://127.0.0.1:<port>/{{$headerValue}}s/{{.SnakeCaseName}}(EQ '<sel_string>')
				a.router.HandleFunc("/{{$headerValue}}s/{{.SnakeCaseName}}{{ printf "%s" "{" }}{{.SnakeCaseName}}:{{.GetSelStringRegex}}{{ printf "%s" "}" }}", 
	  			requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}sBy{{.Name}})).Methods("GET").Name("{{$headerValue}}.STATICFLTR_By{{.Name}}")

			{{end -}}
			{{if .IsBoolFieldType -}}
				{{/*      [(]+(?:EQ|eq)+[ ']+(?:true|TRUE|false|FALSE)+[')]+          */ -}}
				// http://127.0.0.1:<port>/{{$headerValue}}s/{{.SnakeCaseName}}(EQ TRUE)
				a.router.HandleFunc("/{{$headerValue}}s/{{.SnakeCaseName}}{{ printf "%s" "{" }}{{.SnakeCaseName}}:{{.GetSelBoolRegex}}{{ printf "%s" "}" }}",
					requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}sBy{{.Name}})).Methods("GET").Name("{{$headerValue}}.STATICFLTR_By{{.Name}}")

			{{end -}}
			{{if .IsNumberFieldType -}}
				{{/*   float-types:   [(]+(?:EQ|eq|LT|lt|LE|le|GT|gt|GE|ge)+[ ]+[0-9._]+[)]+      */ -}}
				{{/*   uint-types:    [(]+(?:EQ|eq|LT|lt|LE|le|GT|gt|GE|ge)+[ ]+[0-9_]+[)]+       */ -}}
				{{/*   int-types:     [(]+(?:EQ|eq|LT|lt|LE|le|GT|gt|GE|ge)+[ ]+[0-9_-]+[)]+      */ -}} 
			    // http://127.0.0.1:<port>/{{$headerValue}}s/{{.SnakeCaseName}}(EQ 72.43)    
				// http://127.0.0.1:<port>/{{$headerValue}}s/{{.SnakeCaseName}}(LT 110)
				// http://127.0.0.1:<port>/{{$headerValue}}s/{{.SnakeCaseName}}(GE -43)
				a.router.HandleFunc("/{{$headerValue}}s/{{.SnakeCaseName}}{{ printf "%s" "{" }}{{.SnakeCaseName}}:{{.GetSelNumberRegex}}{{ printf "%s" "}" }}",
					requireUserMw.ApplyFn(a.{{$headerValue}}C.Get{{$headerName}}sBy{{.Name}})).Methods("GET").Name("{{$headerValue}}.STATICFLTR_By{{.Name}}")

			{{end -}}
		{{end -}}
    {{end -}}
{{end -}}
}

// getRouteNames walks the routes to get the route names for usr/group/auth lookup
func (a *AppObj) getRouteNames() (authNames []string) {

	walkFn := func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
		name := route.GetName()
		if name == "" {
			path, _ := route.GetPathTemplate()
			return fmt.Errorf("walkRoutes found route %v with no name", path)
		}
		authNames = append(authNames, name)
		// fmt.Println("RouteName:", name)
		return nil
	}

	err := a.router.Walk(walkFn)
	if err != nil {
		fmt.Printf("warning: %v\n", err)
	}
	return authNames
}

func (a *AppObj) initializeAuths() {

	var pendingAuths []string

	// load auths from db (auth objects only)
	auths := a.services.Auth.GetAuths()
	mapAuths := make(map[string]uint64)
	for _, a := range auths {
		mapAuths[a.AuthName] = a.ID
	}

	// load the registered route names
	routeNames := a.getRouteNames()
	for _, rn := range routeNames {
		id := mapAuths[rn]
		if id == 0 {
			log.Printf("warning: auth %s not found in the db Auth master data\n", rn)
			pendingAuths = append(pendingAuths, rn)
		}
	}

	// create the missing auths in the Auth master data
	for _, pa := range pendingAuths {
		log.Printf("info: creating auth %s in the db Auth master data\n", pa)

		d := ""
		parts := strings.Split(pa, ".")
		if len(parts) != 2 {
			d = pa + "inserted during initialization"
		} else {
			d = fmt.Sprintf("Allow %s access to the %s entity", parts[1], parts[0])
		}

		newAuth := models.Auth{
			AuthName:    pa,
			AuthType:    "endpoint",
			Description: d,
		}

		err := a.services.Auth.Create(&newAuth)
		if err != nil {
			log.Printf("warning: attempted creation of auth %s failed. got: %s\n", pa, err)
		} else {
			log.Printf("warning: new auth %s must be added to at least one group\n", pa)
		}
	}
}

// Run the application
func (a *AppObj) Run() {

	// close db connection later
	defer a.services.Close()

	port := ":" + strconv.Itoa(a.cfg.Port)

	if a.cfg.IsProd() {
		fmt.Println("Production settings selected...")
		fmt.Println("Starting https server on port", port)
		log.Fatal(http.ListenAndServeTLS(port, a.cfg.CertFile, a.cfg.KeyFile, a.router))
	} else {
		if a.cfg.IsDev() {
			fmt.Println("Development settings selected...")
		} else {
			fmt.Println("Default settings selected...")
		}
		fmt.Println("Starting http server on port... ", a.cfg.Port)
		log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", a.cfg.Port), a.router))
	}
}

func fatal(err error) {
	if err != nil {
		log.Fatal(err)
	}
}