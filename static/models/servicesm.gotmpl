package models

import (
	"github.com/1414C/sqac"
)

// Services contains the set of services used by the application
type Services struct {
	Usr    UsrService
    {{range .Entities -}} 
    {{.Header.Name}} {{.Header.Name}}Service
    {{end -}}
    // Product ProductService
	handle sqac.PublicDB
}

// ServicesConfig function type
type ServicesConfig func(*Services) error

// WithUsr creates a Usr service
func WithUsr(pepper string) ServicesConfig {
	return func(s *Services) error {
		s.Usr = NewUsrService(s.handle, pepper)
		return nil
	}
}

// WithSqac provides a function that will return a sqac services closure
func WithSqac(dialect, connectionInfo string) ServicesConfig {
	return func(s *Services) error {
		handle := sqac.Create(dialect, false, false, connectionInfo)

		s.handle = handle
		// fmt.Println("handle:", handle)
		return nil
	}
}

// WithLogMode sets the sqac debugging log mode
func WithLogMode(mode bool) ServicesConfig {
	return func(s *Services) error {
		s.handle.Log(mode)
		return nil
	}
}

{{range .Entities -}} 
// With{{.Header.Name}} creates a {{.Header.Name}} service
func With{{.Header.Name}}() ServicesConfig {
	return func(s *Services) error {
		s.{{.Header.Name}} = New{{.Header.Name}}Service(s.handle)
		return nil
	}
}
    
{{end -}}

// NewServices creates a Services object using the dialect and connectionInfo
// to create a db connection and share it across the set of services
// in the Services object.  ServicesConfig == func(*Services) error
func NewServices(cfgs ...ServicesConfig) (*Services, error) {

	var s Services
	for _, cfg := range cfgs {
		if err := cfg(&s); err != nil {
			return nil, err
		}
	}
	return &s, nil
}

// Close the db connection
func (s *Services) Close() error {
	return s.handle.Close()
}

// DestructiveReset - drop all tables immediately and rebuild them
func (s *Services) DestructiveReset() error {
    {{/*  $entity_list is populated by a call to .GetConcatenatedEntities        */ -}}
    {{/*  which is a method on the Static struct in the generator.go program file.   */ -}}
    {{ $entity_list := .GetConcatenatedEntities -}}
    return s.handle.DestructiveResetTables({{$entity_list}})
}

// AlterAllTables runs AlterTables for each listed entity.  Supports additive columns only.
func (s *Services) AlterAllTables() error {
	return s.handle.AlterTables({{$entity_list}}, Usr{})
}