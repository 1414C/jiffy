package models

import (
	"golang.org/x/crypto/bcrypt"
	"regexp"
	"strings"

    // "{{.AppPath}}/util"
	"github.com/jinzhu/gorm"
)

// User represents the signed-in user
type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"` // "-" indicates that the field is not to be stored in the db
	PasswordHash string `gorm:"not null"`
}

// UserDB is an interface that outlines the methods that can be
// used to manipulate user records.
// for single user queries, any error but ErrNotFound will
// result in a http status codd of 500.
type UserDB interface {

	// methods for altering single User entities
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	// methods for querying single User entities
	ByEmail(email string) (*User, error)
	// ByID(id uint) (*User, error) // testing-only
}

// UserService exposes the set of methods that are made available
// to manipulate and work with the user model. (called from controller)
type UserService interface {

	// Authenticate will verify that the user credentials are
	// correct.  Errors will be:
	// ErrNotFound, ErrInvalidPassword, or other(!)
	Authenticate(email string, password string) (*User, error)
	UserDB
}

// userService supports internal interaction with User
type userService struct {
	UserDB
	pepper string
}

// NewUserService needs some work:
func NewUserService(db *gorm.DB, pepper string) UserService {

	ug := &userGorm{db}

	// create a new userValidator
	uv := newUserValidator(ug, pepper)

	return &userService{
		UserDB: uv,
		pepper: pepper,
	}
}

// Authenticate can be used to authenticate a user with the provided email address and password
func (us *userService) Authenticate(email string, password string) (*User, error) {

	// lookup user record
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	// compare password + pepper with stored hash
	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash), []byte(password+us.pepper))
	if err != nil {
		switch err {
		case bcrypt.ErrMismatchedHashAndPassword:
			return nil, ErrInvalidPassword
		default:
			return nil, err
		}
	}
	return foundUser, nil
}

// userValidator is a layer that validates things before
// they go to the db to perform queries.  normalization
// and validation...
type userValidator struct {
	UserDB
	emailRegex *regexp.Regexp
	pepper     string
}

// ensure consistency
var _ UserDB = &userValidator{}

func newUserValidator(udb UserDB, pepper string) *userValidator {
	return &userValidator{
		UserDB:     udb,
		emailRegex: regexp.MustCompile(`^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,16}$`),
		pepper:     pepper,
	}
}

// userValFunc is the function prototype for discrete user validation
// functions and methods.
type userValFunc func(*User) error

// runUserValFuncs is a function that accepts a user and
// then runs a list of discrete validation functions against
// it.
func runUserValFuncs(user *User, fns ...userValFunc) error {

	// iterate over the slice of function names
	for _, fn := range fns {
		err := fn(user)
		if err != nil {
			return err
		}
	}
	return nil
}

// Create backfills user data like the ID, CreatedAt and
// UpdatedAt fields prior to the calling of the UserDB.Create
// method which will create the user in the storage-layer.
func (uv *userValidator) Create(user *User) error {

	// call discrete userValFuncs(...)
	err := runUserValFuncs(user,
		uv.passwordRequired,     // check that a password has been provided
		uv.passwordMinLength,    // check that the password meets min length criteria
		uv.bcryptPassword,       // bcrypt user.Password -> user.PasswordHash
		uv.passwordHashRequired, // check that a passwordHash was computed
		uv.requireEmail,         // check email address format
		uv.normalizeEmail,       // normalize content of user.Email
		uv.emailFormat,          // check the email format via regexp
		uv.emailIsAvailable,     // check that the email address is available
	)

	if err != nil {
		return err
	}
	return uv.UserDB.Create(user)
}

// Update computes a rememberHash value for the user
func (uv *userValidator) Update(user *User) error {

	// call discrete userValFuncs(...)
	err := runUserValFuncs(user) // uv.passwordMinLength,    // check that the password meets min length criteria
	// uv.bcryptPassword,       // bcrypt user.Password -> user.PasswordHash
	// uv.passwordHashRequired, // check that a passwordHash was computed
	// uv.normalizeEmail,       // normalize content of user.Email
	// uv.requireEmail,         // check email address format
	// uv.emailFormat,          // check the email format via regexp
	// uv.emailIsAvailable,     // check that the email address is available

	if err != nil {
		return err
	}
	return uv.UserDB.Update(user)
}

// Delete validates the user related to the specified ID
func (uv *userValidator) Delete(id uint) error {

	var user User
	user.ID = id
	// err := runUserValFuncs(&user, uv.idIsValid)
	// if err != nil {
	// 	return err
	// }
	return uv.UserDB.Delete(id)
}

// ByEmail calls the normalization function(s) for the
// user.Email address, then calls the storage-layer
// if the normalization was successful.
func (uv *userValidator) ByEmail(email string) (*User, error) {

	user := User{
		Email: email,
	}
	err := runUserValFuncs(&user, uv.normalizeEmail)
	if err != nil {
		return nil, err
	}
	return uv.UserDB.ByEmail(user.Email)
}

// private userValidator methods
// passwordRequired checks that a password has been provided
func (uv userValidator) passwordRequired(user *User) error {

	if user.Password == "" {
		return ErrPasswordTooShort
	}
	return nil
}

// passwordMinLength checks that the provided password contains
// at least 6 characters
func (uv *userValidator) passwordMinLength(user *User) error {

	if user.Password == "" {
		return nil
	}
	if len(user.Password) < 6 {
		return ErrPasswordTooShort
	}
	return nil
}

// bcryptPassword conforms to type userValFunc func(*User) error.
// the method will hash the user password with a predefined
// pepper and bcrypt if the Password field is not an empty string.
func (uv *userValidator) bcryptPassword(user *User) error {

	// if no password was provided, leave
	if user.Password == "" {
		return nil
	}

	// add pepper to passwd
	pwBytes := []byte(user.Password + uv.pepper)

	// create hash value from password text and set value on user
	hashedByes, err := bcrypt.GenerateFromPassword(pwBytes, 14)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedByes)
	user.Password = ""
	return nil
}

// passwordHashRequired checks that a password hash has been computed
func (uv userValidator) passwordHashRequired(user *User) error {

	if user.PasswordHash == "" {
		return ErrPasswordHashRequired
	}
	return nil
}

// requireEmail checks the post-normalized value of the email
// to ensure that it contains a value.
func (uv *userValidator) requireEmail(user *User) error {

	if user.Email == "" {
		return ErrEmailRequired
	}
	return nil
}

// normalizeEmail checks the email address for spaces and
// ensures that the address contains only lower-case.
func (uv *userValidator) normalizeEmail(user *User) error {

	user.Email = strings.ToLower(user.Email)
	user.Email = strings.TrimSpace(user.Email)
	return nil
}

// emailFormat checks the format of the email via a simple
// regex-based pattern match.
func (uv *userValidator) emailFormat(user *User) error {
	if !uv.emailRegex.MatchString(user.Email) {
		return ErrEmailInvalid
	}
	return nil
}

// emaiIsAvailable checks the backend db to ensure that the email address
// provided by the user is available for use.
func (uv *userValidator) emailIsAvailable(user *User) error {

	// check the db using the email address - beware of cycles here
	existing, err := uv.ByEmail(user.Email)
	if err == ErrNotFound {
		// email address is not taken
		return nil
	}
	if err != nil {
		return nil
	}

	// found a User with this email address..
	// if the found user has the same ID as this user, it
	// is an update.
	if user.ID != existing.ID {
		return ErrEmailTaken
	}
	return nil
}

//***************************************************************************
//
//		db-access for the userValidator->userGorm interface chain
//
//****************************************************************************
// userGorm is a gorm-based implementation of the UserDB interface.
// consider that you could write userSQL to implement UserDB via
// native sql rather than via orm.
type userGorm struct {
	db *gorm.DB
}

// inclusion of this line ensures that userGorm will always adhere
// to the UserDB interface.  Non-compliance will result in a
// compilation / linter error.
var _ UserDB = &userGorm{}

// ByEmail - lookup a User using the provided email address
// 1 - user, nil
// 2 - nil, ErrNotFound
// 3 - nil, otherError
//
// uses first with an interface
func (ug *userGorm) ByEmail(email string) (*User, error) {

	var user User
	// err := us.db.Where("email = ?", email).First(&user).Error
	db := ug.db.Where("email = ?", email)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// ByID - lookup a User using the provided id
// 1 - user, nil
// 2 - nil, ErrNotFound
// 3 - nil, otherError
//
// uses first with an interface
func (ug *userGorm) ByID(id uint) (*User, error) {

	var user User
	// err := ug.db.Where("id = ?", id).First(&user).Error
	db := ug.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// Create a new User in the db
func (ug *userGorm) Create(user *User) error {
	return ug.db.Create(user).Error
}

// Update an existing user in the db
func (ug *userGorm) Update(user *User) error {
	return ug.db.Save(user).Error
}

// Delete the user related to the specified ID
func (ug *userGorm) Delete(id uint) error {

	user := User{Model: gorm.Model{ID: id}}
	return ug.db.Delete(&user).Error
}
