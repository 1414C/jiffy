package controllers

//=============================================================================================
// base {{.Header.Name}} entity controller_relations code generated on {{ .GetDateTimeStamp }}
//=============================================================================================

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"

	"{{.AppPath}}/models"
	"github.com/gorilla/mux"
)

{{/*  $pref is populated by a call to .GetLowerCasePrefixLetter which is a  */ -}}
{{/*  method on the Entity struct in the main.go program file.              */ -}}
{{ $pref := .GetLowerCasePrefixLetter -}}

{{/*  Entity struct fields for use inside pipelines                         */}}
{{$headerName := .Header.Name -}}
{{$headerValue := .Header.Value -}}

{{/*  Fields slice for use inside pipelines                                 */}}
{{$fields := .Fields}}

{{/*  template needs:                                                       */ -}}
{{/*  1. loop over Relations                                                */ -}}
{{/*  2. function to determine which type of relation to create             */ -}}
{{/*  3. support for GET 1 and GET Many                                     */ -}}
{{/*  4. examine differences between hasOne, hasMany, belongsTo             */ -}}
{{/*  4. examine differences between hasOne, hasMany, belongsTo             */ -}}
{{/*  5. consider that the key fields (from and to) may have been defined   */ -}}
{{/*     as optional.  This means that indirection must be accounted for    */ -}}
{{/*     in the assignments.                                                */ -}}

{{ range .Relations -}}

{{/*  $toEntityFields contains the gen.[]Info field definitions for the     */ -}}
{{/*  ToEntity.  This is required for the validation of user-based key      */ -}}
{{/*  key selection (non-ID).                                               */ -}}
{{$toEntityFields := .ToEntInfo -}}
{{$toEntKeyField := .GetToEntKeyField $toEntityFields -}}
{{$toEntKeyFieldIsOptional := .GetEntFieldIsOptional $toEntKeyField $toEntityFields -}}
 
{{$fromEntKeyField := .GetFromEntKeyField $fields -}}
{{/* {{ $fromEntKeyFieldIsOptional := .GetFromEntKeyFieldIsOptional $fromEntKeyField $fields -}} */ -}}
{{$fromEntKeyFieldIsOptional := .GetEntFieldIsOptional $fromEntKeyField $fields -}}

{{/*  Begin of the hasOne relations support               */ -}}
	{{if or .GetHasOne -}}
// Get{{$headerName}}{{.ToEntity}} facilitates the retrieval of the {{.ToEntity}} related to {{$headerName}}
// by way of modeled 'hasOne' relationship {{.RelName}}.   
// This method is bound to the gorilla.mux router in appobj.go.
// 1:1
//
// GET /{{$headerName}}/:id/{{.RelName}}
// GET /{{$headerName}}/:id/{{.RelName}}/:id
func ({{$pref}}c *{{$headerName}}Controller) Get{{$headerName}}{{.RelName}} (w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	{{$headerValue}}ID, err := strconv.ParseUint(vars["{{$headerValue}}_id"], 10, 64)
	if err != nil {
		log.Println("{{$headerName}} Get:", err)
		respondWithError(w, http.StatusBadRequest, "Invalid {{$headerValue}} number")
		return
	}

	{{.ToEntityLC}}ID, err := strconv.ParseUint(vars["{{.ToEntityLC}}_id"], 10, 64)

	// build a base urlString for the JSON Body self-referencing Href tag
	urlString := buildHrefStringFromCRUDReq(r, false)
	fmt.Println("urlString:",urlString)

	// in all cases the {{$headerValue}} must be retrieved, as the validity of the
	// the access-path must be verified.  Also consider that the {{.ToEntityLC}}
	// :id may not have been provided.
	{{$headerValue}} := models.{{$headerName}}{
		ID: {{$headerValue}}ID,
	}

	err = {{$pref}}c.{{$pref}}s.Get(&{{$headerValue}})
	if err != nil {
		log.Println(err)
		respondWithError(w, http.StatusBadRequest, err.Error())
		return
	}

	// populate params for ToEntity in the generic map
	map{{.ToEntity}}Params := make(map[string]interface{})
	{{.ToEntityLC}} := models.{{.ToEntity}}{}
	if {{.ToEntityLC}}ID != 0 {
		map{{.ToEntity}}Params["ID"] = {{.ToEntityLC}}ID
	}
	
	map{{.ToEntity}}Params["{{.ForeignPK}}"] = {{.FromEntityLC}}ID
	// map{{.ToEntity}}Params["{{.FromEntity}}ID"] = {{.FromEntityLC}}ID

	// call GetRel{{$headerName}}{{.RelName}} in the model
	err = {{$pref}}c.{{$pref}}s.GetRel{{$headerName}}{{.RelName}}(&{{.ToEntityLC}}, map{{.ToEntity}}Params)
	if err != nil {
		log.Println(err)
		respondWithError(w, http.StatusBadRequest, err.Error())
		return
	}

	// build the target url for the navigation, and then redirect thereby reusing
	// all the existing ConnectionState (TLS/transport/client etc.)
	{{.ToEntityLC}}.Href = ""
	if {{.ToEntityLC}}.ID != 0 {
		if r.TLS != nil {
			{{.ToEntityLC}}.Href = "https://"
		} else {
			{{.ToEntityLC}}.Href = "http://"
		}

		{{.ToEntityLC}}.Href = fmt.Sprintf("%s%s/{{.ToEntityLC}}/%d", {{.ToEntityLC}}.Href, r.Host, {{.ToEntityLC}}.ID)
		respondWithJSON(w, http.StatusCreated, {{.ToEntityLC}})
		return
	}
	respondWithJSON(w, http.StatusOK, "[]")
}
	
	{{end -}}


{{/*  Begin of the hasMany and belongsToMany relations support             */ -}}
	{{if or .GetHasMany .GetBelongsToMany -}}
// Get{{$headerName}}{{.ToEntity}}s facilitates the retrieval of {{.ToEntity}}s related to {{$headerName}}
{{if .GetHasMany -}}
// by way of modeled 'hasMany' relationship {{.RelName}}.   
{{else -}}
// by way of modeled 'belongsToMany' relationship {{.RelName}}. 
{{end -}}  
// This method is bound to the gorilla.mux router in appobj.go.
// 1:N
//
// GET /{{$headerName}}/:id/{{.RelName}}s
// GET /{{$headerName}}/:id/{{.RelName}}/:id
func ({{$pref}}c *{{$headerName}}Controller) Get{{$headerName}}{{.ToEntity}}s (w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	{{$headerValue}}ID, err := strconv.ParseUint(vars["{{$headerValue}}_id"], 10, 64)
	if err != nil {
		log.Println("{{$headerName}} Get:", err)
		respondWithError(w, http.StatusBadRequest, "Invalid {{$headerValue}} number")
		return
	}

	{{.ToEntityLC}}ID, err := strconv.ParseUint(vars["{{.ToEntityLC}}_id"], 10, 64)

	// build a base urlString for the JSON Body self-referencing Href tag
	urlString := buildHrefStringFromCRUDReq(r, false)

	// in all cases the {{$headerValue}} must be retrieved, as the validity of the
	// the access-path must be verified.  Also consider that the {{.ToEntityLC}}
	// :id may not have been provided.
	{{$headerValue}} := models.{{$headerName}}{
		ID: {{$headerValue}}ID,
	}

	err = {{$pref}}c.{{$pref}}s.Get(&{{$headerValue}})
	if err != nil {
		log.Println(err)
		respondWithError(w, http.StatusBadRequest, err.Error())
		return
	}

	// build the target url for the navigation, and then redirect thereby reusing
	// all the existing ConnectionState (TLS/transport/client etc.)
	urlString = ""
	if r.TLS != nil {
		urlString = "https://"
	} else {
		urlString = "http://"
	}

	if {{.ToEntityLC}}ID == 0 {
		urlString = fmt.Sprintf("%s%s/{{.ToEntityLC}}s", urlString, r.Host)
	} else {
	{{if $fromEntKeyFieldIsOptional -}}
		urlString = fmt.Sprintf("%s%s/{{.ToEntityLC}}/%d", urlString, r.Host)
	{{else -}}
		urlString = fmt.Sprintf("%s%s/{{.ToEntityLC}}/%d", urlString, r.Host, {{.ToEntityLC}}ID)
	{{end -}}

	}
	http.Redirect(w, r, urlString, http.StatusSeeOther)
}

	{{end -}}
{{end -}}
