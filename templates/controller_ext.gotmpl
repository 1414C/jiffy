package ext

import (
	"{{.AppPath}}/models"
	// "fmt"
	"net/http"
	// "reflect"
)
//===================================================================================================
// base {{.Header.Name}} entity controller extension-point code generated on {{ .GetDateTimeStamp }}
//===================================================================================================

{{/*  $pref is populated by a call to .GetLowerCasePrefixLetter which is a  */ -}}
{{/*  method on the Entity struct in the main.go program file.              */ -}}
{{ $pref := .GetLowerCasePrefixLetter -}}

// Ctrl{{.Header.Name}}CreateExt provides access to the ControllerCreateExt extension-point interface
type Ctrl{{.Header.Name}}CreateExt struct {
	ControllerCreateExt
}

// Ctrl{{.Header.Name}}GetExt provides access to the ControllerGetExt extension-point interface
type Ctrl{{.Header.Name}}GetExt struct {
	ControllerGetExt
}

// Ctrl{{.Header.Name}}UpdateExt provides access to the ControllerUpdateExt extension-point interface
type Ctrl{{.Header.Name}}UpdateExt struct {
	ControllerUpdateExt
}

// {{.Header.Name}}CtrlExt provides access to the {{.Header.Name}} implementations of the following interfaces:
//   CtrlCreateExt
//   CtrlUpdateExt
//   CtrlGetExt
type {{.Header.Name}}CtrlExt struct {
	CrtEp Ctrl{{.Header.Name}}CreateExt
	UpdEp Ctrl{{.Header.Name}}UpdateExt
	GetEp Ctrl{{.Header.Name}}GetExt
}

var {{.Header.Value}}CtrlExp {{.Header.Name}}CtrlExt

// Init{{.Header.Name}}CtrlExt initializes the {{.Header.Value}} entity's controller
// extension-point interface implementations.
func Init{{.Header.Name}}CtrlExt() *{{.Header.Name}}CtrlExt {
	{{.Header.Value}}CtrlExp = {{.Header.Name}}CtrlExt{}
	return &{{.Header.Value}}CtrlExp
}

//------------------------------------------------------------------------------------------
// ControllerCreateExt extension-point interface implementation for entity {{.Header.Name}}
//------------------------------------------------------------------------------------------

// BeforeFirst extension-point implementation for entity {{.Header.Name}}
// TODO: implement checks and document them here
func (crtEP *Ctrl{{.Header.Name}}CreateExt) BeforeFirst(w http.ResponseWriter, r *http.Request) error {

	return nil
}

// AfterBodyDecode extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (crtEP *Ctrl{{.Header.Name}}CreateExt) AfterBodyDecode(ent interface{}) error {

	// fmt.Println("TypeOf ent:", reflect.TypeOf(ent))
	// fmt.Println("ValueOf ent:", reflect.ValueOf(ent))
	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
	// make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = "A new value"

	return nil
}

// BeforeResponse extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (crtEP *Ctrl{{.Header.Name}}CreateExt) BeforeResponse(ent interface{}) error {

	// fmt.Println("TypeOf ent:", reflect.TypeOf(ent))
	// fmt.Println("ValueOf ent:", reflect.ValueOf(ent))
	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
	// make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = {{$pref}}.<field_name> + "."

	return nil
}

//------------------------------------------------------------------------------------------
// ControllerUpdateExt extension-point interface implementation for entity {{.Header.Name}}
//------------------------------------------------------------------------------------------

// BeforeFirst extension-point implementation for entity {{.Header.Name}}
// TODO: implement checks and document them here
func (updEP *Ctrl{{.Header.Name}}UpdateExt) BeforeFirst(w http.ResponseWriter, r *http.Request) error {

	return nil
}

// AfterBodyDecode extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (updEP *Ctrl{{.Header.Name}}UpdateExt) AfterBodyDecode(ent interface{}) error {

	// fmt.Println("TypeOf ent:", reflect.TypeOf(ent))
	// fmt.Println("ValueOf ent:", reflect.ValueOf(ent))
	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
	// make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = "An updated value"
	return nil
}

// BeforeResponse extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (updEP *Ctrl{{.Header.Name}}UpdateExt) BeforeResponse(ent interface{}) error {

	// fmt.Println("TypeOf ent:", reflect.TypeOf(ent))
	// fmt.Println("ValueOf ent:", reflect.ValueOf(ent))
	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
	// make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = {{$pref}}.<field_name> + "."

	return nil
}

//------------------------------------------------------------------------------------------
// ControllerGetExt extension-point interface implementation for entity {{.Header.Name}}
//------------------------------------------------------------------------------------------

// BeforeFirst extension-point implementation for entity {{.Header.Name}}
// TODO: implement checks and document them here
func (getEP *Ctrl{{.Header.Name}}GetExt) BeforeFirst(w http.ResponseWriter, r *http.Request) error {

	return nil
}

// BeforeModelCall extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (getEP *Ctrl{{.Header.Name}}GetExt) BeforeModelCall(ent interface{}) error {

    // fmt.Println("TypeOf ent:", reflect.TypeOf(ent))
	// fmt.Println("ValueOf ent:", reflect.ValueOf(ent))
	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
	// make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = "A new value"

	return nil
}

// BeforeResponse extension-point implementation for entity {{.Header.Name}}
// TODO: implement application logic and document it here
func (getEP *Ctrl{{.Header.Name}}GetExt) BeforeResponse(ent interface{}) error {

	// {{$pref}} := ent.(*models.{{.Header.Name}})
    //
    // make changes / validate the content struct pointer ({{$pref}}) here
	// {{$pref}}.<field_name> = {{$pref}}.<field_name> + "."

	return nil
}