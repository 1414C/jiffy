package appobj

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
)

// PostgresConfig type hold pg config info
type PostgresConfig struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	User     string `json:"User"`
	Password string `json:"Password"`
	Name     string `json:"name"`
}

// ConnectionInfo returns a PostgresConfig string
func (c PostgresConfig) ConnectionInfo() string {

	if c.Password == "" {
		return fmt.Sprintf("host=%s port=%d user=%s dbname=%s sslmode=disable", c.Host, c.Port, c.User, c.Name)
	}
	return fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", c.Host, c.Port, c.User, c.Password, c.Name)
}

// Dialect returns the db type
func (c PostgresConfig) Dialect() string {
	return "postgres"
}

// DefaultPostgresConfig provides a default pg config
// for use in development testing
func DefaultPostgresConfig() PostgresConfig {
	return PostgresConfig{
		Host:     "{{.Database.Host}}",
		Port:     {{.Database.Port}},
		User:     "{{.Database.User}}",
		Password: "{{.Database.Password}}",
		Name:     "{{.Database.Name}}",
	}
}

// Config isProd := false
type Config struct {
	Port           int            `json:"port"`
	Env            string         `json:"env"`
	Pepper         string         `json:"pepper"`
	Database       PostgresConfig `json:"database"`
	CertFile       string         `json:"cert_file"`
	KeyFile        string         `json:"key_file"`
	JWTPrivKeyFile string         `json:"jwt_priv_key_file"`
	JWTPubKeyFile  string         `json:"jwt_pub_key_file"`
}

// IsProd informs the app which environment it is running in
func (c Config) IsProd() bool {
	if c.Env == "prod" {
		return true
	}
	return false
}

// IsDev informs the app which environment it is running in
func (c Config) IsDev() bool {
	if c.Env == "dev" {
		return true
	}
	return false
}

// DefaultConfig returns the app's default config in a Config structure
func DefaultConfig() Config {
	return Config{
		Port:           {{.Port}},
		Env:            "{{.Env}}",
		Pepper:         "{{.Pepper}}",
		Database:       DefaultPostgresConfig(),
		CertFile:       "{{.CertFile}}",
		KeyFile:        "{{.KeyFile}}",
		JWTPrivKeyFile: "{{.JWTPrivKeyFile}}",
		JWTPubKeyFile:  "{{.JWTPubKeyFile}}",
	}
}

// LoadConfig loads the config file, or falls back to the default
func LoadConfig(configReq RunMode) Config {
	
	var fName string
	switch configReq {
	case cDev:
		fName = ".dev.config.json"
	case cPrd:
		fName = ".prd.config.json"
	default:
		fName = "default_config" // not a file ;)
	}

	f, err := os.Open(fName) // cDef will always fail here - ok
	if err != nil {
		if configReq != cDef {
			panic(err)
		}
		fmt.Println("using the default config...")
		return DefaultConfig()
	}
	var c Config
	dec := json.NewDecoder(f)
	err = dec.Decode(&c)
	if err != nil {
		panic(err)
	}
	log.Println("successfully loaded the config file...")
	return c
}
