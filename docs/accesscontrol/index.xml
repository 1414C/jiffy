<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Access Control on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/accesscontrol/</link>
    <description>Recent content in Access Control on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Jul 2018 13:29:10 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/accesscontrol/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Access Control Overview</title>
      <link>https://1414c.github.io/jiffy/accesscontrol/ac-content-a/</link>
      <pubDate>Mon, 02 Jul 2018 13:26:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/accesscontrol/ac-content-a/</guid>
      <description>Overview Access to application resources (entities) is controlled in four ways:
 Configuration based service activation Secure user authentication Authorization checks via JWT token claim inspection embedded as middleware in the protected route declarations (end-points) Usr/Auth/Group/GroupAuth caches are maintained on each group-member and updated via an internal API and dissemination protocol in the group-membership service  Configuration Based Service Activation An internal service is created for each of the the application&amp;rsquo;s entities.</description>
    </item>
    
    <item>
      <title>Authorizations</title>
      <link>https://1414c.github.io/jiffy/accesscontrol/ac-content-b/</link>
      <pubDate>Mon, 02 Jul 2018 13:28:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/accesscontrol/ac-content-b/</guid>
      <description>Standard CRUD Authorizations As discussed in the Access Control Overview, each of the generated services end-points is assigned a name which is used as an Authorization object by the router middleware.
Standard CRUD end-points for entity Library are generated as follows:
// ====================== Library protected routes for standard CRUD access ====================== a.router.HandleFunc(&amp;quot;/librarys&amp;quot;, requireUserMw.ApplyFn(a.libraryC.GetLibrarys)).Methods(&amp;quot;GET&amp;quot;).Name(&amp;quot;library.GET_SET&amp;quot;) a.router.HandleFunc(&amp;quot;/library&amp;quot;, requireUserMw.ApplyFn(a.libraryC.Create)).Methods(&amp;quot;POST&amp;quot;).Name(&amp;quot;library.CREATE&amp;quot;) a.router.HandleFunc(&amp;quot;/library/{id:[0-9]+}&amp;quot;, requireUserMw.ApplyFn(a.libraryC.Get)).Methods(&amp;quot;GET&amp;quot;).Name(&amp;quot;library.GET_ID&amp;quot;) a.router.HandleFunc(&amp;quot;/library/{id:[0-9]+}&amp;quot;, requireUserMw.ApplyFn(a.libraryC.Update)).Methods(&amp;quot;PUT&amp;quot;).Name(&amp;quot;library.UPDATE&amp;quot;) a.router.HandleFunc(&amp;quot;/library/{id:[0-9]+}&amp;quot;, requireUserMw.ApplyFn(a.libraryC.Delete)).Methods(&amp;quot;DELETE&amp;quot;).Name(&amp;quot;library.DELETE&amp;quot;)  Notice that each end-point handler is assigned a name via the gorilla.</description>
    </item>
    
    <item>
      <title>Access Revocation and Renewal</title>
      <link>https://1414c.github.io/jiffy/accesscontrol/ac-content-c/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/accesscontrol/ac-content-c/</guid>
      <description>JWT Tokens and Access Revocation Jiffy applications do not direct support the revocation or automatic renewal of JWT tokens. Instead, a cross-process cache of User information is maintained via a group-membership service. The service ensures that changes to User information (create/update/delete) are disseminated to all running instances of the Jiffy generated application. Consequently, in Jiffy-based applications it makes sense to discuss User access revocation from the perspective of an administrator making a call to the user-API to perform general User deletion or deactivation.</description>
    </item>
    
    <item>
      <title>Using External Identity Providers</title>
      <link>https://1414c.github.io/jiffy/accesscontrol/ac-content-d/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/accesscontrol/ac-content-d/</guid>
      <description>Using External Identity Providers It is possible to use an external Identity Provider to supply JWT tokens capable of accessing jiffy-applications. In order for an external IDP to provide usable JWT&amp;rsquo;s to jiffy the following criteria must be met:
 The IDP must sign the JWT&amp;rsquo;s with an algorithm that jiffy supports The IDP must provide the jiffy application with a public-key for signature verification A valid user-id must exist in the jiffy application The IDP must contain a mapping of user IDP ID&amp;rsquo;s to jiffy-application internal user id&amp;rsquo;s The IDP must contain a record of the Authorization-Groups that the user should have access to The IDP must include the jiffy-specific claims in the JWT payload The IDP must supply the &amp;lsquo;alg&amp;rsquo; and &amp;lsquo;typ&amp;rsquo; elements in the JWT header  Sample JWT for Jiffy Application Access  A user with an existing jiffy-application userID has been configured in an external IDP.</description>
    </item>
    
  </channel>
</rss>