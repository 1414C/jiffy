<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Model Maintenance on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/models/</link>
    <description>Recent content in Model Maintenance on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Feb 2018 15:03:10 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/models/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Model Overview</title>
      <link>https://1414c.github.io/jiffy/models/mo-content-a/</link>
      <pubDate>Mon, 05 Feb 2018 13:26:13 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/models/mo-content-a/</guid>
      <description>Model Files Model files contain the Entity, Index and Relation definitions that you wish to generate services for. Entity model definition consists of an array of JSON objects, with each object being limited to a flat hierarchy and basic go-data-types, (although this is easily extended). By default, the Jiffy generator expects a models.json file in the execution directory, but a correctly formatted JSON file can be loaded from any location by executing jiffy with the -m flag.</description>
    </item>
    
    <item>
      <title>Simple Two Entity Model</title>
      <link>https://1414c.github.io/jiffy/models/mo-content-b/</link>
      <pubDate>Mon, 05 Feb 2018 14:52:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/models/mo-content-b/</guid>
      <description>Two Entity Model The following JSON illustrates the definition of a simple two-entity model file. In this case, model entities &amp;lsquo;Person&amp;rsquo; and &amp;lsquo;Country&amp;rsquo; will be created in the generated application, along with corresponding database tables &amp;lsquo;person&amp;rsquo; and &amp;lsquo;country&amp;rsquo;. No relationships have been defined between the two entities; this example simply illustrates how to add multiple entity definitions to a model file.
{ &amp;quot;entities&amp;quot;: [ { &amp;quot;typeName&amp;quot;: &amp;quot;Person&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;name&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;nonUnique&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,like&amp;quot; }, &amp;quot;age&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;uint&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,lt,gt&amp;quot; }, &amp;quot;weight&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;float64&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,lt,le,gt,ge&amp;quot; }, &amp;quot;validLicense&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;bool&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;nonUnique&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,ne&amp;quot; } }, &amp;quot;ext_points&amp;quot;: { &amp;quot;gen_controller&amp;quot;: true, &amp;quot;gen_model&amp;quot;: true } }, { &amp;quot;typeName&amp;quot;: &amp;quot;Country&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;name&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;nonUnique&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,like&amp;quot; }, &amp;quot;isoCode&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;uint&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;required&amp;quot;: false, &amp;quot;unique&amp;quot;: false, &amp;quot;index&amp;quot;: &amp;quot;unique&amp;quot;, &amp;quot;selectable&amp;quot;: &amp;quot;eq,lt,gt&amp;quot; } }, &amp;quot;ext_points&amp;quot;: { &amp;quot;gen_controller&amp;quot;: true, &amp;quot;gen_model&amp;quot;: true } } ] }  The sample model file can be downloaded from the following location: simpleTwoEntityModel.</description>
    </item>
    
    <item>
      <title>Model with Composite Index</title>
      <link>https://1414c.github.io/jiffy/models/mo-content-c/</link>
      <pubDate>Mon, 05 Feb 2018 14:57:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/models/mo-content-c/</guid>
      <description>Two Entity Model with Composite Index The following JSON illustrates the addition of a composite-index to an entity definition. An index composed of the &amp;lsquo;name&amp;rsquo; and &amp;lsquo;province&amp;rsquo; fields has been declared in the &amp;lsquo;Owner&amp;rsquo; entity. This declaration will result in the creation of a non-unique btree index for columns &amp;lsquo;name&amp;rsquo; and &amp;lsquo;province&amp;rsquo; in the database. Any number of composite indices may be declared for an entity. No relationships have been defined between the two entities; this example simply illustrates how to declare a composite-index for an entity.</description>
    </item>
    
    <item>
      <title>Entity Relations</title>
      <link>https://1414c.github.io/jiffy/models/mo-content-d/</link>
      <pubDate>Mon, 05 Feb 2018 15:03:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/models/mo-content-d/</guid>
      <description>Modeling Entity Relationships Relationships between entities can be declared in the application model file via the addition of a &amp;lsquo;relations&amp;rsquo; block inside an entity&amp;rsquo;s declaration. Relationships are based on resource id&amp;rsquo;s by default, although it is possible to specify non-default key fields in the configuration, or implement complex joins directly by maintaining the entity&amp;rsquo;s controller and model. &amp;lsquo;relations&amp;rsquo; blocks look as follows:
&amp;quot;relations&amp;quot;: [ { &amp;quot;relName&amp;quot;: &amp;quot;ToOwner&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;relType&amp;quot;: &amp;quot;hasOne&amp;quot;, &amp;quot;toEntity&amp;quot;: &amp;quot;Owner&amp;quot; } } ]  The sample relations block illustrates the declaration of a &amp;lsquo;hasOne&amp;rsquo; relationship between &amp;lsquo;Car&amp;rsquo; and &amp;lsquo;Owner&amp;rsquo; making use of default-keys.</description>
    </item>
    
  </channel>
</rss>