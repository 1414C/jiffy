<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jiffy Overview on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/overview/</link>
    <description>Recent content in Jiffy Overview on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Feb 2018 13:26:10 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Jiffy?</title>
      <link>https://1414c.github.io/jiffy/overview/ov-content-a/</link>
      <pubDate>Mon, 05 Feb 2018 13:26:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/overview/ov-content-a/</guid>
      <description>What does Jiffy do? Jiffy is a model-based RESTful application services generator written in go. Think of Jiffy as an accelerator: Jiffy generates a complete backend services application, and that generated application is what will be run in production.
Jiffy allows a developer to generate a robust go-based application that treats the data persistence layer in a generic manner. This allows the generated application to connect to number of different database systems (outlined below), without any code changes.</description>
    </item>
    
    <item>
      <title>Jiffy Application Overview</title>
      <link>https://1414c.github.io/jiffy/overview/ov-content-b/</link>
      <pubDate>Mon, 05 Feb 2018 13:26:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/overview/ov-content-b/</guid>
      <description>What does a generated Jiffy application look like? Generated Jiffy applications can be pointed at the DBMS of your choice without the need to recompile the binary (architecture differences not withstanding). This means that a developer can build a model, fully test it locally using SQLite and then redirect the application to a formal testing environment running SAP Hana, or any of the other supported database systems.
Applications are generated based on model files which are encoded as simple JSON.</description>
    </item>
    
    <item>
      <title>Jiffy Application Structure</title>
      <link>https://1414c.github.io/jiffy/overview/ov-content-c/</link>
      <pubDate>Sat, 10 Feb 2018 23:56:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/overview/ov-content-c/</guid>
      <description>Jiffy Application File Structure iffy generates the following structure when provided with a model-file describing a simple &amp;lsquo;Person&amp;rsquo; entity. Explanations of each folder and its content are discussed throughout the documentation.
FirstApp ├── appobj │ ├── appconf.go │ ├── appobj.go | └── lead_set_get.go ├── controllers │ ├── authc.go │ ├── controllerfuncs.go │ ├── groupauthc.go │ ├── person_relationsc.go │ ├── personc.go │ ├── usrc.go │ ├── usr_groupc.go │ └── ext │ ├── extc_interfaces.</description>
    </item>
    
    <item>
      <title>Jiffy Application Architecture</title>
      <link>https://1414c.github.io/jiffy/overview/ov-content-d/</link>
      <pubDate>Sat, 10 Feb 2018 23:53:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/overview/ov-content-d/</guid>
      <description>Jiffy Application Architecture Jiffy approaches the API from a services perspective. Each entity has a corresponding service that can be started when the application initializes. The Usr, UsrGroup, Auth and GroupAuth services are always generated by default when creating a Jiffy application. Additional services are generated based on the content of your project&amp;rsquo;s model files.
Generated application services can be broken down into five high-level areas: 
graph TD; subgraph A(End-Points)--B(Middleware) B--C(Controllers) C--D(Models) D--E(Database) end</description>
    </item>
    
    <item>
      <title>Jiffy Development Steps</title>
      <link>https://1414c.github.io/jiffy/overview/ov-content-e/</link>
      <pubDate>Wed, 14 Feb 2018 22:11:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/overview/ov-content-e/</guid>
      <description>Jiffy Pre-Generation Workflow Jiffy is intended to generate a clean, straight-forward and secure application services platform just like the one you would write by hand. Jiffy originally started as a few go templates used to generate boiler-plate code that seemed onerous to type. Generation is a lot nicer than cut-and-paste. There are places in the generated code where things could be more elegant, but the code is intended to be easy to work on even if one is not familiar with it.</description>
    </item>
    
  </channel>
</rss>