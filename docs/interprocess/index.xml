<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interprocess Communication on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/interprocess/</link>
    <description>Recent content in Interprocess Communication on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Jul 2018 16:52:10 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/interprocess/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Group Membership Overview</title>
      <link>https://1414c.github.io/jiffy/interprocess/ip-content-a/</link>
      <pubDate>Mon, 02 Jul 2018 16:52:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/interprocess/ip-content-a/</guid>
      <description>Overview  Jiffy-generated applications can be deployed as single or multiple instances. When running multiple instances of a Jiffy-generated application, a group-membership service establishes connectivity between all running instances. An application instance always runs a group-membership service, even when running as a single instance. Each application instance running the group-membership service can be thought of as a process. At any point in time, the group has an elected leader.</description>
    </item>
    
    <item>
      <title>Failure Detector</title>
      <link>https://1414c.github.io/jiffy/interprocess/ip-content-b/</link>
      <pubDate>Mon, 02 Jul 2018 17:02:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/interprocess/ip-content-b/</guid>
      <description>Group Membership Failure Detector  When discussing deployment of a Jiffy-generated application, each instance of the application is referred to as a process or application instance. Processes may fail. Processes exist with one of four publicly disseminated and well-known statuses: {ACTIVE; SUSPECT; FAILED; DEPARTED} Processes exist with a publicly (within the group) disseminated incarnation number. Process viability is checked at selectable intervals (ping-cycle time) via a ping-ack mechanism. Each process pings all other processes in the group in random order once per ping-cycle.</description>
    </item>
    
    <item>
      <title>Process Startup / Join</title>
      <link>https://1414c.github.io/jiffy/interprocess/ip-content-c/</link>
      <pubDate>Mon, 02 Jul 2018 17:03:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/interprocess/ip-content-c/</guid>
      <description>Process Startup When an application instance (process) starts, the group-membership subsystem is started as a go-routine within the application.
Member Communication The group-membership service communicates between processes via web-sockets connections. Each process accepts group-membership messages on the address:port specified by the &amp;lsquo;internal_address&amp;rsquo; key in the application configuration file. This port is not secured, and the group-membership messages are not encrypted in any way. It is advisable that the address:port used here is not accessible to the outside world.</description>
    </item>
    
    <item>
      <title>Process Shutdown</title>
      <link>https://1414c.github.io/jiffy/interprocess/ip-content-d/</link>
      <pubDate>Mon, 02 Jul 2018 17:03:10 -0701</pubDate>
      
      <guid>https://1414c.github.io/jiffy/interprocess/ip-content-d/</guid>
      <description>Planned Shutdown  Application instances can be stopped deliberately. For example, application instances running in a cluster may be started and stopped based on auto-scaling behaviors. Application shutdowns consider the need to complete work in progress by listening for SIGTERM, SIGKILL and os.Interrupt &amp;lsquo;events&amp;rsquo; in a dedicated goroutine which we will refer to here as the &amp;lsquo;shutdown detector goroutine&amp;rsquo;. When a signal of interest is detected, the shutdown detector goroutine passes a value through a channel being listened to in the main services loop.</description>
    </item>
    
  </channel>
</rss>