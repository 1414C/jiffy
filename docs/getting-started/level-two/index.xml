<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Let&#39;s Test Something on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/getting-started/level-two/</link>
    <description>Recent content in Let&#39;s Test Something on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Feb 2018 22:40:21 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/getting-started/level-two/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Login</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-a/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-a/</guid>
      <description>Launch Postman and specify a target URL of: http://127.0.0.1:8080/usr/login making sure to select the http POST method. Maintain the request body to provide a user-id and password as shown in the following JSON snippet. Typically the user-id for a Jiffy application is an email address, but we make an exception for the default administration user.
{ &amp;#34;email&amp;#34;: &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;initpass&amp;#34; }  When you have finished and your Postman (or other test utility) looks like the following image, click the &amp;lsquo;Send&amp;rsquo; button to post your login request to the running application.</description>
    </item>
    
    <item>
      <title>Create a Person</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-b/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-b/</guid>
      <description>Now that we have successfully logged into the application and received our first JWT, it is time to create a new &amp;lsquo;Person&amp;rsquo; entity. Start by copying the content of the &amp;lsquo;token&amp;rsquo; tag from the login response body to the clipboard. This JWT must henceforth be included in the http header of every subsequent request.
Create a new tab in Postman and specify a target URL of http://127.0.0.1:8080/person with the http POST method.</description>
    </item>
    
    <item>
      <title>Create Another Person</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-c/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-c/</guid>
      <description>Let&amp;rsquo;s change a few things in our request-body and create another &amp;lsquo;Person&amp;rsquo; entity. Edit the JSON body in the request section of your Postman session and click &amp;lsquo;Send&amp;rsquo; when you are ready.

Another &amp;lsquo;Person&amp;rsquo; entity has been created.

Create one more &amp;lsquo;Person&amp;rsquo; entity so we have three (or more) in total.</description>
    </item>
    
    <item>
      <title>Get Some Persons</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-d/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-d/</guid>
      <description>So far we have created a few &amp;lsquo;Person&amp;rsquo; entities. We have observed that upon successful creation of an entity, a JSON representation of that entity is passed back to us via the response-writer. Let&amp;rsquo;s now look at how we can get a list of all of our &amp;lsquo;Person&amp;rsquo; entities.
Create a new tab in Postman and specify a target URL of http://127.0.0.1:8080/persons making sure to select the http GET method. Next, add the following key-value pair to the http header:</description>
    </item>
    
    <item>
      <title>Get a Person</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-e/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-e/</guid>
      <description>What if we need to read a single &amp;lsquo;Person&amp;rsquo;, or isolate a &amp;lsquo;Person&amp;rsquo; entity from a list of entities? Let&amp;rsquo;s try reading a &amp;lsquo;Person&amp;rsquo; entity using its &amp;lsquo;id&amp;rsquo; key.
Create a new tab in Postman and specify a target URL of http://127.0.0.1:8080/person/10000001 making sure to select the http GET method. Next, add the following key-value pair to the http header:
 Authorization : Bearer *paste-your-JWT-here*  When you have finished, the test session should look as follows and it is time to read &amp;lsquo;Person&amp;rsquo; 10000001 from the database.</description>
    </item>
    
    <item>
      <title>Update a Person</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-f/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-f/</guid>
      <description>If you have been following along, we have created &amp;lsquo;Person&amp;rsquo; entities, read &amp;lsquo;Person&amp;rsquo; entities both in bulk and by &amp;lsquo;id&amp;rsquo; key. We are now going to take a look at updating an existing &amp;lsquo;Person&amp;rsquo; entity.
Read &amp;lsquo;Person&amp;rsquo; entity 10000001 from the database as shown in the Get a Person example.
Once you have successfully read &amp;lsquo;Person&amp;rsquo; entity 10000001 into your Postman session, copy the content of the response body to your clipboard.</description>
    </item>
    
    <item>
      <title>Get Persons With Restrictions</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-g/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-g/</guid>
      <description>We have seen how to Create, Get, and Update a &amp;lsquo;Person&amp;rsquo; entity, but before we get around to the Delete operation, let&amp;rsquo;s take a quick look at some other simple things we can do with Get entity lists.
Each of the following bullet points can be expanded to show various ways that entities can be read, sorted and counted via a standardized set of URL suffixes. Remember to include the JWT and correct http verb in your requests when testing these operations in your test environment.</description>
    </item>
    
    <item>
      <title>Delete a Person</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-h/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-h/</guid>
      <description>Next we will delete one of our &amp;lsquo;Person&amp;rsquo; entities. Create a new tab in Postman and specify a target URL of http://127.0.0.1:8080/person/10000000 with the http DELETE verb. As usual, add the following key-value pairs to the http header:
 Content-Type : application\json Authorization : Bearer *paste-your-JWT-here*  When you have something that looks as follows, click the &amp;lsquo;Send&amp;rsquo; button to issue the delete request to the application.
If the delete request was successful, you will see a http response-code of 202 (Accepted).</description>
    </item>
    
    <item>
      <title>Next Steps</title>
      <link>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-i/</link>
      <pubDate>Tue, 06 Feb 2018 22:34:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/level-two/l2-content-i/</guid>
      <description>That is a quick overview of the sort of things that can be done with an application generated by Jiffy. There is a lot more to see however!
Good places to start would be in the Jiffy Overview and the Model Maintenance section.</description>
    </item>
    
  </channel>
</rss>