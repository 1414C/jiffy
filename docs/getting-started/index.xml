<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/getting-started/</link>
    <description>Recent content in Getting Started on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Feb 2018 22:40:21 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Environment</title>
      <link>https://1414c.github.io/jiffy/getting-started/gs-content-a/</link>
      <pubDate>Mon, 05 Feb 2018 13:33:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/gs-content-a/</guid>
      <description>If you already have Go installed and know that your installation is working, you should skip to the next section. If you need to get Go installed on your machine, keep reading.
Go is easy to setup and can be installed from source or binary package, both which are available at golang.org. Jiffy is presently built and tested using golang version 1.14, and jiffy expects at least version 1.13. Jiffy uses go modules.</description>
    </item>
    
    <item>
      <title>Installing Jiffy</title>
      <link>https://1414c.github.io/jiffy/getting-started/gs-content-b/</link>
      <pubDate>Mon, 05 Feb 2018 20:39:34 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/gs-content-b/</guid>
      <description>Install from Binary Distribution At the moment, the easiest way to install Jiffy is to pull down the binary distribution matching your build environment from the binary_distributions folder in the jiffy repository. There you will find builds of the jiffy executable for the following GOOS and GOARCH combinations.
   GOOS GOARCH     darwin amd64   linux amd64   linux arm   linux arm64   linux mips64   linux ppc64   linux s390x   freebsd amd64   freebsd arm   openbsd amd64   openbsd arm    This list is not exhaustive.</description>
    </item>
    
    <item>
      <title>Let&#39;s Build Something</title>
      <link>https://1414c.github.io/jiffy/getting-started/gs-content-c/</link>
      <pubDate>Mon, 05 Feb 2018 21:15:53 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/gs-content-c/</guid>
      <description>Now that Jiffy is installed, we will build a simple service to test it out.
Jiffys source tree comes with a number of sample model files that you can be used to get the hang of things. We are going to use a simple model file that contains an entity named &amp;lsquo;Person&amp;rsquo;. The model file can be found in the Jiffy source tree, or pulled directly from the Jiffy github repository.</description>
    </item>
    
    <item>
      <title>Let&#39;s Run Something</title>
      <link>https://1414c.github.io/jiffy/getting-started/gs-content-d/</link>
      <pubDate>Mon, 05 Feb 2018 21:47:32 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/getting-started/gs-content-d/</guid>
      <description>Let&amp;rsquo;s execute our first application!
cd $GOPATH/src/jiffy_tests/first_app go run main.go -dev -rs Executing with the -dev and -rs flags instructs our new application to initialize itself using the development configuration file, and forces a rebuild of the &amp;lsquo;Super&amp;rsquo; authorization-group. Consequently, some warning and info messages will scroll up the screen which is expected.
2018/02/05 22:29:26 package sqac init is running 2018/02/05 22:29:26 successfully loaded the config file... 2018/02/05 22:29:26 JWTPrivKeyFile: jwtkeys/private.</description>
    </item>
    
  </channel>
</rss>