<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing and Deployment on Jiffy Services Generator</title>
    <link>https://1414c.github.io/jiffy/usage/</link>
    <description>Recent content in Testing and Deployment on Jiffy Services Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Jul 2018 13:29:10 -0700</lastBuildDate>
    
	<atom:link href="https://1414c.github.io/jiffy/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Application Configuration Overview</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-a/</link>
      <pubDate>Mon, 02 Jul 2018 13:26:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-a/</guid>
      <description>Overview The generated application code can be run unchanged for testing purposes, but some external setup is required.
 Edit the generated .prd.config.json file to define your production configuration. Edit the generated .dev.config.json file to define your development / testing configuration. When using SSL to test locally, SSL certs will be needed. See the SSL setup section below for instructions regarding the generation of certificates suitable for local testing via go test.</description>
    </item>
    
    <item>
      <title>Default Configuration</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-b/</link>
      <pubDate>Mon, 02 Jul 2018 13:28:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-b/</guid>
      <description>Default Config The following command strings may be used to run the program using a set of default configuration that has been hard-coded into the source files. The default configuration may be edited in the generated appobj/appconf.go file to suit local requirements. The default application settings are shown in the server configuration file format. The default configuration publishes the end-points on port 3000 over http due to the absence of the ‘cert_file’ and ‘key_file’ values.</description>
    </item>
    
    <item>
      <title>Development Configuration</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-c/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-c/</guid>
      <description>Development Config The following command string may be used to run the program using the values defined in the ./.dev.config.json file.
$ go run main.go -dev The generated sample dev configuration file should be edited to match the local environment. Jiffy will generate a sample .dev.config.json file similar to the one shown below:
{ &amp;#34;external_address&amp;#34;: &amp;#34;127.0.0.1:3000&amp;#34;, &amp;#34;internal_address&amp;#34;: &amp;#34;127.0.0.1:4444&amp;#34;, &amp;#34;env&amp;#34;: &amp;#34;dev&amp;#34;, &amp;#34;ping_cycle&amp;#34;: 1, &amp;#34;failure_threshold&amp;#34;: 5, &amp;#34;pepper&amp;#34;: &amp;#34;secret-pepper-key&amp;#34;, &amp;#34;hmac_Key&amp;#34;: &amp;#34;secret-hmac-key&amp;#34;, &amp;#34;database&amp;#34;: { &amp;#34;db_dialect&amp;#34;: &amp;#34;postgres&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;localhost&amp;#34;, &amp;#34;port&amp;#34;: 5432, &amp;#34;usr&amp;#34;: &amp;#34;godev&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;gogogo123&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;glrestgen&amp;#34;, &amp;#34;ormLogActive&amp;#34;: true, &amp;#34;ormDebugTraceActive&amp;#34;: false }, &amp;#34;group_leader_kvs&amp;#34;: { &amp;#34;local_standalone&amp;#34;: { &amp;#34;active&amp;#34;: true, &amp;#34;internal_address&amp;#34;: &amp;#34;127.</description>
    </item>
    
    <item>
      <title>Production Configuration</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-d/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-d/</guid>
      <description>Production Config The following command string may be used to run the program using the values defined in the ./.prd.config.json file.
$ go run main.go -prod The generated sample production configuration file should be edited to match the local environment. Jiffy will generate a sample .prod.config.json file similar to the one shown below:
{ &amp;#34;external_address&amp;#34;: &amp;#34;127.0.0.1:8080&amp;#34;, &amp;#34;internal_address&amp;#34;: &amp;#34;127.0.0.1:4444&amp;#34;, &amp;#34;env&amp;#34;: &amp;#34;prod&amp;#34;, &amp;#34;ping_cycle&amp;#34;: 1, &amp;#34;failure_threshold&amp;#34;: 5, &amp;#34;pepper&amp;#34;: &amp;#34;secret-pepper-key&amp;#34;, &amp;#34;hmac_Key&amp;#34;: &amp;#34;secret-hmac-key&amp;#34;, &amp;#34;database&amp;#34;: { &amp;#34;db_dialect&amp;#34;: &amp;#34;postgres&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;localhost&amp;#34;, &amp;#34;port&amp;#34;: 5432, &amp;#34;user&amp;#34;: &amp;#34;godev&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;gogogo123&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;glrestgen&amp;#34;, &amp;#34;ormLogActive&amp;#34;: true }, &amp;#34;group_leader_kvs&amp;#34;: { &amp;#34;local_standalone&amp;#34;: { &amp;#34;active&amp;#34;: true, &amp;#34;internal_address&amp;#34;: &amp;#34;127.</description>
    </item>
    
    <item>
      <title>Application Server Flags</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-e/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-e/</guid>
      <description>Application Server Flags Flags are generally not used, as the configuration files (models.json) are easier to deal with. There are however, a few flags that can be used when starting the server:
 -dr  The -dr switch is used to perform a destructive reset of the application&#39;s data tables. This flag causes the application tables to be dropped and recreated, but does not affect the user, user-group, or authorization tables.</description>
    </item>
    
    <item>
      <title>Testing with TLS</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-f/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-f/</guid>
      <description>Generate Self-Signed Certs for https Testing If you wish to perform local https-based testing, it is possible to do so through the use of self-signed certificates. Self-signed certificates can be easily created through the use of the openssl tool on *nix systems. Verify the OpenSSL Installation Open a terminal session and verify that openssl is available:
$ which -a openssl /usr/bin/openssl If openssl is not shown in the &amp;lsquo;which&amp;rsquo; command output, check your path to ensure you have access to /usr/bin or /usr/local/bin.</description>
    </item>
    
    <item>
      <title>Automated Application Testing</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-g/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-g/</guid>
      <description>Automated Testing When jiffy generates the application, a set of automated tests are also generated for the application&#39;s end-points. The tests make use of the standard go test tooling. Tests can be conducted using http or https, and run against the address:port that the application is presently serving on. Remember, the application must be running prior to executing the test.
The generated tests check the availability of the end-points and attempt to perform CRUD activities using representative data for the field-types.</description>
    </item>
    
    <item>
      <title>Key Value Store Support</title>
      <link>https://1414c.github.io/jiffy/usage/us-content-h/</link>
      <pubDate>Mon, 02 Jul 2018 13:29:10 -0700</pubDate>
      
      <guid>https://1414c.github.io/jiffy/usage/us-content-h/</guid>
      <description>Overview A KVS is required in order to persist the current group-leader information in multi-instance jiffy-application deployments. This is discussed in the Joining Overview section of the Interprocess Communication documentation. Although we refer to the persistent store as a KVS, anything that manages access and allows read/write operations can be used.
Jiffy applications support the use of Redis, Memcached, Stand-Alone/Local or Sluggo KVS systems out of the box. The active group-leadership KVS can be configured in the .</description>
    </item>
    
  </channel>
</rss>